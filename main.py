from random import randint
from Delete_Msg.DelMsg import delete_message
from Anti_flood.middlewares import ThrottlingMiddleware
from Markup_Button import mainMenu, sub_inline_markup, Sity, back_inline_markup

from aiogram.types import InputFile
from aiogram.types.message import ContentType
from aiogram.dispatcher.filters import Command
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from db import Database
from Config._Config_ import BOT_ON
from TOKEN_BOT.TOKEN import tokens, YOOTOKEN

from city.krim.data_text import krim_list
from city.astrahan.data_text import astrahan_list
from city.volgograd.data_text import volgograd_list

return_list = []
all_list = [volgograd_list, krim_list, astrahan_list]

for index in all_list:
    for j in index:
        return_list.append(j)
print(return_list)

storage = MemoryStorage()
bot = Bot(token=tokens)
dp = Dispatcher(bot=bot, storage=storage)

word_good = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ü—Ä–∏–∫–æ–ª—å–Ω–æ", "–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ"]

db = Database('database.db')


async def on_startup(message: types.Message):
    print(BOT_ON)
    
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
@dp.message_handler(commands=['start'])  # –ë–ª–æ–∫ –∫–æ–º–º–∞–Ω–¥
async def start_func(message: types.Message) -> None:
    if(not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è {message.chat.first_name} –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ', reply_markup=mainMenu())
    else:
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –ø–æ–≤—Ç–æ—Ä–Ω–æ {message.chat.first_name} –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ', reply_markup=mainMenu())
 
# –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã:
@dp.callback_query_handler(text="subexcur")
async def subexcur(call: types.CallbackQuery) -> None:
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", payload="excur_sub", provider_token=YOOTOKEN, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±", "amount": 15000}])

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ø–æ—Ç–µ–∫—É
@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    
# –≤—ã–≤–æ–¥ –∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    if message.successful_payment.invoice_payload == "excur_sub":
        db.plus(message.from_user.id, '+', 1)
        await bot.send_message(message.from_user.id, "–í—ã –∫—É–ø–∏–ª–∏ —ç–∫—Å–∫—É—Ä—Å–∏—é! –í–∞–º –Ω–∞ —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω 1 –±–∞–ª–ª –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é!")
        
              
# –ë–ª–æ–∫–∏ –∫–æ–º–º–∞–Ω–¥

@dp.message_handler(text=['üõí–ö–£–ü–ò–¢–¨ –≠–ö–°–ö–£–†–°–ò–Æüõí'])  
async def buy_excur(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, "–ü–æ–∫—É–ø–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏", reply_markup=sub_inline_markup)
    await message.delete()

@dp.message_handler(text=['üèò–í–´–ë–†–ê–¢–¨ –ì–û–†–û–îüèò'])  
async def sity_set(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=Sity())
    await bot.send_message(message.from_user.id, "–ù–∞–∑–∞–¥", reply_markup=back_inline_markup)
    await message.delete()
    
@dp.message_handler(text=['üÜò–ü–û–ú–û–©–¨üÜò'])  
async def help_sos(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, "/start - –ø–µ—Ä–µ–∑–∞–ø—É–∫ –±–æ—Ç–∞")
    await message.delete()
 
@dp.message_handler(text=['üí∞–ë–ê–õ–ê–ù–°üí∞'])  
async def balance_func(message: types.Message) -> None:        
    user_balance = "–í–∞—à –±–∞–ª–∞–Ω—Å: " + db.get_balance(message.from_user.id) + " –±–∞–ª–ª–æ–≤\n" + "–ß—Ç–æ-–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–ª—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ '–ö–£–ü–ò–¢–¨ –≠–ö–°–ö–£–†–°–ò–Æ'"
    await bot.send_message(message.from_user.id, user_balance)

@dp.callback_query_handler(lambda query: query.data == 'backs')
async def inline_button_callback(query: types.CallbackQuery):
    await query.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥!", reply_markup=mainMenu())
    
              
"""
—Ç—É—Ç –ø–µ—Ä–≤–∞—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ—á–∫–∞ –≤ —Ç—Ä–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
–º–æ–∏—Ö, –ø–æ—Ç–æ–º —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –æ–Ω–∞
—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
@dp.message_handler(text=['–í–æ–ª–≥–æ–≥—Ä–∞–¥'])
async def volgograd_func(message: types.Message) -> None:
    db.change_city(message.from_user.id, '–í–æ–ª–≥–æ–≥—Ä–∞–¥')
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width=len(volgograd_list))
        
    for i in volgograd_list:
        markup.add(i)
            
    await bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?', reply_markup=markup)
    
    
@dp.message_handler(text=['–ö—Ä—ã–º'])
async def krim_func(message: types.Message) -> None:
    db.change_city(message.from_user.id, '–ö—Ä—ã–º')
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width=len(krim_list))
        
    for i in krim_list:
        markup.add(i)
            
    await bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?', reply_markup=markup)
    
@dp.message_handler(text=['–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å'])
async def astrahan_func(message: types.Message) -> None:
    db.change_city(message.from_user.id, '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å')
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width=len(astrahan_list))
        
    for i in astrahan_list:
        markup.add(i)
            
    await bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?', reply_markup=markup)
    
@dp.message_handler(text=[x for x in return_list])
async def volgograd_func(message: types.Message) -> None:
    print(message.text + "234234")

    """
    —Ç—É—Ç —É –Ω–∞—Å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏ —Å—Ä–∞–∑—É –∂–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–∏–º –∏ –ø–æ–∫—É–ø–∫–∞
    –µ–±–æ–π –æ–Ω–æ –≤–Ω–∞—Ç—É–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç :))))))))))
    """
    
    

# –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —ç–∫—Å–∫—É—Ä—Å–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
@dp.message_handler(content_types=['text'])  
async def vol_Scen(message: types.Message) -> None:
     
    try:
        """
        –≤—Å–µ –Ω–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å
        –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
         
        –≤–µ—Å—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ–¥–µ–ª–∞–Ω —Ç–∞–∫:
        
        city_for_user - —ç—Ç–æ —É –Ω–∞—Å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —é–∑–µ—Ä–∞
        direction_for_user - —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ
        progression_for_user - –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç–∫—Å–∫—É—Ä—Å–∏–∏
        interactiv_direction_for_user - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–µ –∏–º–µ–µ—Ç—Å—è
        
        # reset_progression_for_user - —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å–∞
        # change_direction_for_user - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # update_progression_for_user - += –∫ –ø—Ä–æ–≥—Ä–µ—Å—É
        # change_interactiv_direction_for_user - –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        city_for_user = db.select_city(message.from_user.id)
        direction_for_user = db.select_direction(message.from_user.id)
        progression_for_user = db.select_progress(message.from_user.id)
        interactiv_direction_for_user = db.select_interactive_direction(message.from_user.id)
        
        # reset_progression_for_user = db.reset_progress(message.from_user.id)
        # change_direction_for_user = db.change_direction(message.from_user.id, message.text)
        # update_progression_for_user = db.update_progress(message.from_user.id)
        # change_interactiv_direction_for_user = db.change_interactiv_direction(message.from_user.id, "—á–∏—Å–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        
        if message.text == '–Ø –¥—É–º–∞—é —ç—Ç–æ –ø–µ—Ä–≤–æ–µ':
            db.change_interactiv_direction(message.from_user.id, 0)
        elif message.text == '–Ø –¥—É–º–∞—é —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ':
            db.change_interactiv_direction(message.from_user.id, 1)
        elif message.text == '–Ø –¥—É–º–∞—é —ç—Ç–æ —Ç—Ä–µ—Ç—å–µ':
            db.change_interactiv_direction(message.from_user.id, 2)
            
        if db.get_balance(message.from_user.id) != 0 and (message.text == "–í–æ–µ–Ω–Ω—ã–π —Å—é–∂–µ—Ç" or message.text == "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å—é–∂–µ—Ç" or message.text == "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—é–∂–µ—Ç"):
            db.reset_progress(message.from_user.id)
            db.MINUS(message.from_user.id)
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True, row_width=1)
            next = types.InlineKeyboardButton(
                word_good[randint(0, len(word_good)-1)])
            markup.add(next)
            await bot.send_message(message.chat.id, "–ù–∞—á–Ω–µ–º –Ω–∞—à—É —ç–∫—Å–∫—É—Ä—Å–∏—é", reply_markup=markup)
        elif all_users[message.chat.id]['condition'] == True and (message.text in word_good or message.text == '–Ø –¥—É–º–∞—é —ç—Ç–æ –ø–µ—Ä–≤–æ–µ' or message.text == '–Ø –¥—É–º–∞—é —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ' or message.text == '–Ø –¥—É–º–∞—é —ç—Ç–æ —Ç—Ä–µ—Ç—å–µ'):
            db.update_progress(message.from_user.id)
            markup = types.ReplyKeyboardMarkup(
                resize_keyboard=True, row_width=1)
            next = types.InlineKeyboardButton(
                word_good[randint(0, len(word_good)-1)])
            helping = types.InlineKeyboardButton("/help")
            interactiv_button_0 = types.InlineKeyboardButton("–Ø –¥—É–º–∞—é —ç—Ç–æ –ø–µ—Ä–≤–æ–µ")
            interactiv_button_1 = types.InlineKeyboardButton("–Ø –¥—É–º–∞—é —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ")
            interactiv_button_2 = types.InlineKeyboardButton("–Ø –¥—É–º–∞—é —ç—Ç–æ —Ç—Ä–µ—Ç—å–µ")

            try:
                if len(city_for_user[direction_for_user.replace(" ", "")][progression_for_user][interactiv_direction_for_user][2]) == 4:
                    markup.add(interactiv_button_0, interactiv_button_1, interactiv_button_2, helping)
            except IndexError:
                markup.add(next, helping)
                
            if len(city_for_user[direction_for_user.replace(" ", "")][progression_for_user][interactiv_direction_for_user][0]) == 1: 
                await bot.send_message(message.chat.id, city_for_user[direction_for_user.replace(" ", "")][progression_for_user][0], reply_markup=markup)
            else:
                await bot.send_message(message.chat.id, city_for_user[direction_for_user.replace(" ", "")][progression_for_user][interactiv_direction_for_user], reply_markup=markup)
           
   
            if len(city_for_user[direction_for_user.replace(" ", "")][progression_for_user][interactiv_direction_for_user][0]) == 1:
                await bot.send_photo(message.chat.id, open(city_for_user[direction_for_user.replace(" ", "")][progression_for_user][1], 'rb'), reply_markup=markup)
            else:
                await bot.send_photo(message.chat.id, open(city_for_user[direction_for_user.replace(" ", "")][progression_for_user][interactiv_direction_for_user][0], 'rb'), reply_markup=markup)
        else:
            await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n–ò–ª–∏\n\n–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —ç–∫—Å–∫—É—Ä—Å–∏—é,\n—Å–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
            

    except FileNotFoundError:
        pass
    
    except IndexError:
        await bot.send_message(message.chat.id, "–≠–∫—Å–∫—É—Ä—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –∂–¥–µ–º –≤–∞—Å –µ—â–µ")
        db.MINUS(message.from_user.id, '-', 1)
        db.change_direction(message.from_user.id, '')
        await start_func(message)
        
        
    except KeyError:
        print(message.chat.id, "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª", message.text)
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏")

if __name__ == '__main__':
    dp.middleware.setup(ThrottlingMiddleware())
    executor.start_polling(dispatcher=dp,
                           skip_updates=True,
                           on_startup=on_startup)

