from config import bot, db, ADMINS
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from txt_read.read_txt import read_txt_file
from KeyboardMarkup.KeyboardMarkup import admin_panel, clear_reset_kb, promocode_admin
from states.states import (
    Mail,
    UpdateExcur,
    UsersSupport,
    PromocodeAdmin,
    DELETEPromocodeAdmin,
)
import asyncio
import re
from datetime import datetime

"""–ë–ª–æ–∫–∏ –∫–æ–º–º–∞–Ω–¥ –ê–¥–º–∏–Ω–∞"""


async def admin_panel_handler(msg: types.Message):
    if msg.from_user.id in ADMINS:
        Admin_help = await read_txt_file(["maintxt\\admin_help.txt"])

        await bot.send_message(
            msg.from_user.id, f"{Admin_help[0]}", reply_markup=admin_panel()
        )
        await msg.delete()
    else:
        await msg.reply(
            f"<b>–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å‚ùóÔ∏è</b>\n <b>‚ùóÔ∏è–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ç–æ—Ç —Å–∞–º—ã–π {msg.from_user.first_name}</b>"
        )


async def add_price(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id in ADMINS:
        await UpdateExcur.price.set()
        await call.message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –≤—Å–µ—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π –≤ —Ä—É–±–ª—è—Ö:", reply_markup=clear_reset_kb()
        )
    else:
        await call.message.reply(
            f"<b>–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å‚ùóÔ∏è</b>\n <b>‚ùóÔ∏è–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ç–æ—Ç —Å–∞–º—ã–π {call.from_user.first_name}</b>"
        )


async def add_price_desc(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["price"] = int(msg.text) * 100
    await msg.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É!")

    data = await state.get_data()
    prices = int(data.get("price"))

    db.add_price(1, +prices)

    await state.finish()


"""–†–∞—Å—Å—ã–ª–∫–∞"""


async def mail_handler(call: types.CallbackQuery):
    await bot.send_message(
        call.from_user.id,
        "<b>‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏‚ùóÔ∏è</b>",
        reply_markup=clear_reset_kb(),
    )
    await Mail.mail.set()


async def mail_on(message: types.Message, state: FSMContext):
    if types.ContentType.TEXT == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
        for user in db.get_users():
            try:
                await bot.send_message(chat_id=user[0], text=message.html_text)
                if int(user[0] != 1):
                    db.set_active(user[0], 1)
                await asyncio.sleep(0.33)
            except:
                db.set_active(user[0], 0)
        else:
            await message.answer("<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>")
            await state.finish()
    elif types.ContentType.PHOTO == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        print(1)
        for user in db.get_users():
            try:
                await bot.send_photo(
                    chat_id=user[0],
                    photo=message.photo[-1].file_id,
                    caption=message.html_text if message.caption else None,
                )
                if int(user[0] != 1):
                    db.set_active(user[0], 1)
                await asyncio.sleep(0.33)
            except:
                db.set_active(user[0], 0)
        else:
            await message.answer("<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>")
            await state.finish()

    elif types.ContentType.VIDEO == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ
        for user in db.get_users():
            try:
                await bot.send_video(
                    chat_id=user[0],
                    video=message.video.file_id,
                    caption=message.html_text if message.caption else None,
                )
                if int(user[0] != 1):
                    db.set_active(user[0], 1)
                await asyncio.sleep(0.33)
            except:
                db.set_active(user[0], 0)
        else:
            await message.answer("<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>")
            await state.finish()

    elif types.ContentType.ANIMATION == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª gif
        for user in db.get_users():
            try:
                await bot.send_animation(
                    chat_id=user[0],
                    animation=message.animation.file_id,
                    caption=message.html_text if message.caption else None,
                )
                if int(user[0] != 1):
                    db.set_active(user[0], 1)
                await asyncio.sleep(0.33)
            except:
                db.set_active(user[0], 0)
        else:
            await message.answer("<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>")
            await state.finish()

    else:
        await message.answer(
            "<b>‚ùóÔ∏è–î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>"
        )
        await state.finish()


async def send_statistics_users(call: types.CallbackQuery):
    users_count = db.get_user_count()
    users_last_day = db.get_users_last_day_count()
    users_last_week = db.get_users_last_week_count()
    users_last_month = db.get_users_last_month_count()
    users_last_year = db.get_users_last_year_count()

    await call.message.answer(
        f"""<b>
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Ä¢{users_count}
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å ‚Ä¢{users_last_day}  
‚ïë –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é ‚Ä¢{users_last_week}  
‚ïë –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü ‚Ä¢{users_last_month} 
‚ïë –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥  ‚Ä¢{users_last_year}  
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
</b>"""
    )


async def send_statistics_excursion(call: types.CallbackQuery):
    excur_statistic_count = db.get_excur_statistic_count()
    excur_statisticlast_day = db.get_excur_statistic_last_day()
    excur_statisticlast_week = db.get_excur_statistic_last_week()
    excur_statistic_last_month = db.get_excur_statistic_last_month()
    excur_statistic_last_year = db.get_excur_statistic_last_year()

    income_from_excursions = db.get_total_excur_price()

    await call.message.answer(
        f"""<b>
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–Ω–æ ‚Ä¢{excur_statistic_count}
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å ‚Ä¢{excur_statisticlast_day}   
‚ïë –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é ‚Ä¢{excur_statisticlast_week}  
‚ïë –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü ‚Ä¢{excur_statistic_last_month}
‚ïë –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥  ‚Ä¢{excur_statistic_last_year}   
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë–ò—Ç–æ–≥: {income_from_excursions}‚ÇΩ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
</b>"""
    )


async def support_handler(call: types.CallbackQuery, state: FSMContext):
    callback_data = call.data.strip()
    match = re.match(r"^support_(.*)$", callback_data)
    match_list = match.group(1).split("%")
    print(match_list)
    await UsersSupport.id_support.set()
    async with state.proxy() as data:
        data["id_support"] = int(match_list[0])
    print(match_list[0])
    print(match_list[1])
    await UsersSupport.usesname.set()
    async with state.proxy() as data:
        data["usesname"] = str(match_list[1])

    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=clear_reset_kb())
    await UsersSupport.response_text.set()


async def support_message_handler(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    id_support = data.get("id_support")
    first_name = data.get("usesname")
    print(id_support)
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if types.ContentType.TEXT == msg.content_type:
        text = f"""
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üìÖ –î–∞—Ç–∞: {date}

üë§ –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {first_name},

–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º, —á—Ç–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. 

üí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {msg.html_text}

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞       
        """
        try:
            await bot.send_message(chat_id=id_support, text=text)
            await asyncio.sleep(0.33)
        except:
            await msg.answer("<b>–û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –±–æ—Ç–µ!</b>")
            await state.finish()

        await msg.answer("<b>‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>")
        await state.finish()
    elif types.ContentType.PHOTO == msg.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        text = f"""
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üìÖ –î–∞—Ç–∞: {date}

üë§ –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {first_name},

–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º, —á—Ç–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. 

üí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {msg.html_text if msg.caption else ' '}

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞       
        """
        try:
            await bot.send_photo(
                chat_id=id_support, photo=msg.photo[-1].file_id, caption=text
            )
            await asyncio.sleep(0.33)
        except:
            await msg.answer("<b>–û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –±–æ—Ç–µ!</b>")
            await state.finish()

        await msg.answer("<b>‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>")
        await state.finish()

    elif types.ContentType.VIDEO == msg.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ
        text = f"""
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üìÖ –î–∞—Ç–∞: {date}

üë§ –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {first_name},

–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º, —á—Ç–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. 

üí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {msg.html_text if msg.caption else '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç–≤—É–µ—Ç'}

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞       
        """
        try:
            await bot.send_video(
                chat_id=id_support, video=msg.video.file_id, caption=text
            )
            await asyncio.sleep(0.33)
        except:
            await msg.answer("<b>–û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –±–æ—Ç–µ!</b>")
            await state.finish()

        await msg.answer("<b>‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>")
        await state.finish()

    elif types.ContentType.STICKER == msg.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä
        try:
            await bot.send_sticker(chat_id=id_support, sticker=msg.sticker.file_id)
            await asyncio.sleep(0.33)
        except:
            await msg.answer("<b>–û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –±–æ—Ç–µ!</b>")
            await state.finish()

        await msg.answer("<b>‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>")
        await state.finish()
    else:
        await msg.answer("<b>–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!</b>")


async def panel_promocode(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id in ADMINS:
        promo = db.get_promo_discount_dict()
        output = ""
        for key, value in promo.items():
            output += f"‚Ä¢{key}: {value}%\n"
        await call.message.answer(
            f"<b>–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n{output}</b>",
            reply_markup=promocode_admin(),
        )


async def add_promocode(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id in ADMINS:
        await PromocodeAdmin.promo.set()
        await call.message.answer(
            "<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞:</b>",
            reply_markup=clear_reset_kb(),
        )


async def add_promocode_desc_promo(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["promo"] = msg.text
    await PromocodeAdmin.discount.set()
    await msg.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç 0 –¥–æ 100 (–±–µ–∑ %):</b>",
        reply_markup=clear_reset_kb(),
    )


async def add_promocode_desc_discount(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if int(msg.text) >= 0 and int(msg.text) <= 100:
            data["discount"] = int(msg.text)
            await PromocodeAdmin.usage.set()
            await msg.answer(
                "<b>–í–≤–µ–¥–∏—Ç–µ –±—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è(–¥–∞ –∏–ª–∏ –Ω–µ—Ç)</b>",
                reply_markup=clear_reset_kb(),
            )
        else:
            await msg.answer(
                "<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∫–∏–¥–∫–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.</b>"
            )


async def add_promocode_desc_usage(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if str(msg.text) == "–¥–∞" or "–Ω–µ—Ç" or "–î–∞" or "–ù–µ—Ç":
            data["usage"] = str(msg.text)
            try:
                data = await state.get_data()
                promo = str(data.get("promo"))
                discount = int(data.get("discount"))
                usage = str(data.get("usage"))
                if usage == "–¥–∞" or "–î–∞":
                    usage = 1
                else:
                    usage = 0

                db.add_promocode(promo, discount, usage)
                await msg.answer("<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>")
                await state.finish()

            except ValueError:
                await msg.answer(
                    "<b>–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ª–µ–∑—Ç–µ –≤ –∫–æ–¥!</b>"
                )

        else:
            await msg.answer("<b>–ú–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç!</b>")


async def delete_promocode(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id in ADMINS:
        await DELETEPromocodeAdmin.promo_delete.set()
        await call.message.answer(
            "<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>",
            reply_markup=clear_reset_kb(),
        )


async def delete_promocode_desc(msg: types.Message, state: FSMContext):
    try:
        promo_msg_delete = msg.text
        promo = db.get_promo_discount_dict()
        if promo_msg_delete in promo:
            db.delete_promocode(promo_msg_delete)
            await msg.answer("<b>üóë –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>")
            await state.finish()
        else:
            await msg.answer("<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥!</b>")
    except:
        await msg.answer(
            "<b>–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞!</b>"
        )


def register_handlers_admins(dp: Dispatcher):
    dp.register_message_handler(admin_panel_handler, text=["admin", "/admin"])

    dp.register_callback_query_handler(add_price, text="select_price")
    dp.register_message_handler(add_price_desc, state=UpdateExcur.price)

    dp.register_callback_query_handler(mail_handler, text="rassilka")
    dp.register_message_handler(
        mail_on, state=Mail.mail, content_types=types.ContentType.ANY
    )

    dp.register_callback_query_handler(
        send_statistics_users, text="send_statistics_users"
    )
    dp.register_callback_query_handler(
        send_statistics_excursion, text="send_statistics_excursion"
    )

    dp.register_callback_query_handler(
        support_handler, lambda c: c.data.startswith("support_")
    )
    dp.register_message_handler(
        support_message_handler,
        state=UsersSupport.response_text,
        content_types=types.ContentType.ANY,
    )

    dp.register_callback_query_handler(panel_promocode, text="admin_promocode")

    dp.register_callback_query_handler(add_promocode, text="insert_promocode")
    dp.register_message_handler(add_promocode_desc_promo, state=PromocodeAdmin.promo)
    dp.register_message_handler(
        add_promocode_desc_discount, state=PromocodeAdmin.discount
    )
    dp.register_message_handler(add_promocode_desc_usage, state=PromocodeAdmin.usage)

    dp.register_callback_query_handler(delete_promocode, text="delete_promocode")
    dp.register_message_handler(
        delete_promocode_desc, state=DELETEPromocodeAdmin.promo_delete
    )
